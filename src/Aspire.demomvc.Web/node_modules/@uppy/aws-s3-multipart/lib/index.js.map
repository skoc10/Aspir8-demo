{"version":3,"names":["BasePlugin","RequestClient","EventManager","RateLimitedQueue","filterNonFailedFiles","filterFilesToEmitUploadStarted","createAbortError","MultipartUploader","throwIfAborted","createSignedURL","HTTPCommunicationQueue","packageJson","assertServerError","res","error","Error","message","Object","assign","getExpiry","credentials","expirationDate","Expiration","timeUntilExpiry","Math","floor","Date","now","undefined","getAllowedMetadata","_ref","meta","allowedMetaFields","querify","metaFields","keys","fromEntries","filter","key","map","realKey","value","String","defaultOptions","limit","getTemporarySecurityCredentials","shouldUseMultipart","file","size","retryDelays","companionHeaders","_companionCommunicationQueue","_classPrivateFieldLooseKey","_client","_cachedTemporaryCredentials","_getTemporarySecurityCredentials","_setS3MultipartState","_getFile","_uploadLocalFile","_getCompanionClientArgs","_upload","_setCompanionHeaders","_setResumableUploadsCapability","_resetResumableCapability","_Symbol$for","Symbol","for","AwsS3Multipart","constructor","uppy","opts","_rateLimitedQueue","uploadPartBytes","createMultipartUpload","listParts","abortMultipartUpload","completeMultipartUpload","signPart","getUploadParameters","defineProperty","_getCompanionClientArgs2","_uploadLocalFile2","_getTemporarySecurityCredentials2","writable","_ref2","uploadId","cFile","getFile","id","setFileState","s3Multipart","fileIDs","length","files","getFilesByIds","filesFiltered","filesToEmit","emit","promises","isRemote","getQueue","requests","_classPrivateFieldLooseBase","controller","AbortController","removedHandler","removedFile","abort","on","uploadPromise","getRequestClientForFile","uploadRemoteFile","signal","wrapSyncFunction","off","priority","upload","Promise","all","setCompanionHeaders","boolean","capabilities","getState","setState","resumableUploads","type","title","dynamicDefaultOptions","bind","prepareUploadParts","_ref3","partNumber","body","presignedUrls","headers","parts","number","chunk","url","rateLimitedQueue","uploaders","create","uploaderEvents","uploaderSockets","setOptions","newOptions","resetUploaderReferences","fileID","really","remove","close","assertHost","method","companionUrl","metadata","post","filename","name","then","_ref4","oldSignal","_signal","encodeURIComponent","get","_ref5","_signal2","uploadIdEnc","options","data","expires","fields","accountKey","AccessKeyId","accountSecret","SecretAccessKey","sessionToken","SessionToken","bucketName","bucket","Region","region","Key","crypto","randomUUID","_ref6","_ref7","_signal3","delete","query","URLSearchParams","_ref8","signature","onProgress","onComplete","resolve","reject","xhr","XMLHttpRequest","open","forEach","setRequestHeader","responseType","timeout","onabort","cleanup","removeEventListener","addEventListener","ev","source","status","responseText","includes","loaded","lengthComputable","etag","getResponseHeader","location","toUpperCase","console","warn","ETag","target","send","install","addPreProcessor","addUploader","uninstall","removePreProcessor","removeUploader","setTimeout","_this","bytesUploaded","bytesTotal","uploader","onError","err","log","onSuccess","result","uploadResp","uploadURL","companionComm","arguments","getChunkSize","onPartComplete","part","eventManager","onFileRemove","removed","onCancelAll","reason","onFilePause","isPaused","pause","start","onPauseAll","onResumeAll","_file$remote","remote","protocol","VERSION","version"],"sources":["index.ts"],"sourcesContent":["import BasePlugin, {\n  type DefinePluginOpts,\n  type PluginOpts,\n} from '@uppy/core/lib/BasePlugin.js'\nimport { RequestClient } from '@uppy/companion-client'\nimport type { RequestOptions } from '@uppy/utils/lib/CompanionClientProvider'\nimport type { Body as _Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { Uppy } from '@uppy/core'\nimport EventManager from '@uppy/core/lib/EventManager.js'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport {\n  filterNonFailedFiles,\n  filterFilesToEmitUploadStarted,\n} from '@uppy/utils/lib/fileFilters'\nimport { createAbortError } from '@uppy/utils/lib/AbortController'\n\nimport MultipartUploader from './MultipartUploader.ts'\nimport { throwIfAborted } from './utils.ts'\nimport type {\n  UploadResult,\n  UploadResultWithSignal,\n  MultipartUploadResultWithSignal,\n  UploadPartBytesResult,\n  Body,\n} from './utils.js'\nimport createSignedURL from './createSignedURL.ts'\nimport { HTTPCommunicationQueue } from './HTTPCommunicationQueue.ts'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\ninterface MultipartFile<M extends Meta, B extends Body> extends UppyFile<M, B> {\n  s3Multipart: UploadResult\n}\n\ntype PartUploadedCallback<M extends Meta, B extends _Body> = (\n  file: UppyFile<M, B>,\n  part: { PartNumber: number; ETag: string },\n) => void\n\ndeclare module '@uppy/core' {\n  export interface UppyEventMap<M extends Meta, B extends _Body> {\n    's3-multipart:part-uploaded': PartUploadedCallback<M, B>\n  }\n}\n\nfunction assertServerError<T>(res: T): T {\n  if ((res as any)?.error) {\n    const error = new Error((res as any).message)\n    Object.assign(error, (res as any).error)\n    throw error\n  }\n  return res\n}\n\nexport interface AwsS3STSResponse {\n  credentials: {\n    AccessKeyId: string\n    SecretAccessKey: string\n    SessionToken: string\n    Expiration?: string\n  }\n  bucket: string\n  region: string\n}\n\n/**\n * Computes the expiry time for a request signed with temporary credentials. If\n * no expiration was provided, or an invalid value (e.g. in the past) is\n * provided, undefined is returned. This function assumes the client clock is in\n * sync with the remote server, which is a requirement for the signature to be\n * validated for AWS anyway.\n */\nfunction getExpiry(\n  credentials: AwsS3STSResponse['credentials'],\n): number | undefined {\n  const expirationDate = credentials.Expiration\n  if (expirationDate) {\n    const timeUntilExpiry = Math.floor(\n      ((new Date(expirationDate) as any as number) - Date.now()) / 1000,\n    )\n    if (timeUntilExpiry > 9) {\n      return timeUntilExpiry\n    }\n  }\n  return undefined\n}\n\nfunction getAllowedMetadata<M extends Record<string, any>>({\n  meta,\n  allowedMetaFields,\n  querify = false,\n}: {\n  meta: M\n  allowedMetaFields?: string[] | null\n  querify?: boolean\n}) {\n  const metaFields = allowedMetaFields ?? Object.keys(meta)\n\n  if (!meta) return {}\n\n  return Object.fromEntries(\n    metaFields\n      .filter((key) => meta[key] != null)\n      .map((key) => {\n        const realKey = querify ? `metadata[${key}]` : key\n        const value = String(meta[key])\n        return [realKey, value]\n      }),\n  )\n}\n\ntype MaybePromise<T> = T | Promise<T>\n\ntype SignPartOptions = {\n  uploadId: string\n  key: string\n  partNumber: number\n  body: Blob\n  signal?: AbortSignal\n}\n\nexport type AwsS3UploadParameters =\n  | {\n      method: 'POST'\n      url: string\n      fields: Record<string, string>\n      expires?: number\n      headers?: Record<string, string>\n    }\n  | {\n      method?: 'PUT'\n      url: string\n      fields?: Record<string, never>\n      expires?: number\n      headers?: Record<string, string>\n    }\n\nexport interface AwsS3Part {\n  PartNumber?: number\n  Size?: number\n  ETag?: string\n}\n\ntype AWSS3WithCompanion = {\n  companionUrl: string\n  companionHeaders?: Record<string, string>\n  companionCookiesRule?: string\n  getTemporarySecurityCredentials?: true\n}\ntype AWSS3WithoutCompanion = {\n  getTemporarySecurityCredentials?: (options?: {\n    signal?: AbortSignal\n  }) => MaybePromise<AwsS3STSResponse>\n  uploadPartBytes?: (options: {\n    signature: AwsS3UploadParameters\n    body: FormData | Blob\n    size?: number\n    onProgress: any\n    onComplete: any\n    signal?: AbortSignal\n  }) => Promise<UploadPartBytesResult>\n}\n\ntype AWSS3NonMultipartWithCompanionMandatory = {\n  // No related options\n}\n\ntype AWSS3NonMultipartWithoutCompanionMandatory<\n  M extends Meta,\n  B extends Body,\n> = {\n  getUploadParameters: (\n    file: UppyFile<M, B>,\n    options: RequestOptions,\n  ) => MaybePromise<AwsS3UploadParameters>\n}\ntype AWSS3NonMultipartWithCompanion = AWSS3WithCompanion &\n  AWSS3NonMultipartWithCompanionMandatory & {\n    shouldUseMultipart: false\n  }\n\ntype AWSS3NonMultipartWithoutCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithoutCompanion &\n  AWSS3NonMultipartWithoutCompanionMandatory<M, B> & {\n    shouldUseMultipart: false\n  }\n\ntype AWSS3MultipartWithoutCompanionMandatorySignPart<\n  M extends Meta,\n  B extends Body,\n> = {\n  signPart: (\n    file: UppyFile<M, B>,\n    opts: SignPartOptions,\n  ) => MaybePromise<AwsS3UploadParameters>\n}\n/** @deprecated Use signPart instead */\ntype AWSS3MultipartWithoutCompanionMandatoryPrepareUploadParts<\n  M extends Meta,\n  B extends Body,\n> = {\n  /** @deprecated Use signPart instead */\n  prepareUploadParts: (\n    file: UppyFile<M, B>,\n    partData: {\n      uploadId: string\n      key: string\n      parts: [{ number: number; chunk: Blob }]\n      signal?: AbortSignal\n    },\n  ) => MaybePromise<{\n    presignedUrls: Record<number, string>\n    headers?: Record<number, Record<string, string>>\n  }>\n}\ntype AWSS3MultipartWithoutCompanionMandatory<M extends Meta, B extends Body> = {\n  getChunkSize?: (file: UppyFile<M, B>) => number\n  createMultipartUpload: (file: UppyFile<M, B>) => MaybePromise<UploadResult>\n  listParts: (\n    file: UppyFile<M, B>,\n    opts: UploadResultWithSignal,\n  ) => MaybePromise<AwsS3Part[]>\n  abortMultipartUpload: (\n    file: UppyFile<M, B>,\n    opts: UploadResultWithSignal,\n  ) => MaybePromise<void>\n  completeMultipartUpload: (\n    file: UppyFile<M, B>,\n    opts: {\n      uploadId: string\n      key: string\n      parts: AwsS3Part[]\n      signal: AbortSignal\n    },\n  ) => MaybePromise<{ location?: string }>\n} & (\n  | AWSS3MultipartWithoutCompanionMandatorySignPart<M, B>\n  | AWSS3MultipartWithoutCompanionMandatoryPrepareUploadParts<M, B>\n)\n\ntype AWSS3MultipartWithoutCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithoutCompanion &\n  AWSS3MultipartWithoutCompanionMandatory<M, B> & {\n    shouldUseMultipart?: true\n  }\n\ntype AWSS3MultipartWithCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithCompanion &\n  Partial<AWSS3MultipartWithoutCompanionMandatory<M, B>> & {\n    shouldUseMultipart?: true\n  }\n\ntype AWSS3MaybeMultipartWithCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithCompanion &\n  Partial<AWSS3MultipartWithoutCompanionMandatory<M, B>> &\n  AWSS3NonMultipartWithCompanionMandatory & {\n    shouldUseMultipart: (file: UppyFile<M, B>) => boolean\n  }\n\ntype AWSS3MaybeMultipartWithoutCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithoutCompanion &\n  AWSS3MultipartWithoutCompanionMandatory<M, B> &\n  AWSS3NonMultipartWithoutCompanionMandatory<M, B> & {\n    shouldUseMultipart: (file: UppyFile<M, B>) => boolean\n  }\n\ntype RequestClientOptions = Partial<\n  ConstructorParameters<typeof RequestClient<any, any>>[1]\n>\n\ninterface _AwsS3MultipartOptions extends PluginOpts, RequestClientOptions {\n  allowedMetaFields?: string[] | null\n  limit?: number\n  retryDelays?: number[] | null\n}\n\nexport type AwsS3MultipartOptions<\n  M extends Meta,\n  B extends Body,\n> = _AwsS3MultipartOptions &\n  (\n    | AWSS3NonMultipartWithCompanion\n    | AWSS3NonMultipartWithoutCompanion<M, B>\n    | AWSS3MultipartWithCompanion<M, B>\n    | AWSS3MultipartWithoutCompanion<M, B>\n    | AWSS3MaybeMultipartWithCompanion<M, B>\n    | AWSS3MaybeMultipartWithoutCompanion<M, B>\n  )\n\nconst defaultOptions = {\n  // TODO: null here means “include all”, [] means include none.\n  // This is inconsistent with @uppy/aws-s3 and @uppy/transloadit\n  allowedMetaFields: null,\n  limit: 6,\n  getTemporarySecurityCredentials: false as any,\n  shouldUseMultipart: ((file: UppyFile<any, any>) =>\n    file.size !== 0) as any as true, // TODO: Switch default to:\n  // eslint-disable-next-line no-bitwise\n  // shouldUseMultipart: (file) => file.size >> 10 >> 10 > 100,\n  retryDelays: [0, 1000, 3000, 5000],\n  companionHeaders: {},\n} satisfies Partial<AwsS3MultipartOptions<any, any>>\n\nexport default class AwsS3Multipart<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<\n  DefinePluginOpts<AwsS3MultipartOptions<M, B>, keyof typeof defaultOptions> &\n    // We also have a few dynamic options defined below:\n    Pick<\n      AWSS3MultipartWithoutCompanionMandatory<M, B>,\n      | 'getChunkSize'\n      | 'createMultipartUpload'\n      | 'listParts'\n      | 'abortMultipartUpload'\n      | 'completeMultipartUpload'\n    > &\n    Required<Pick<AWSS3WithoutCompanion, 'uploadPartBytes'>> &\n    AWSS3MultipartWithoutCompanionMandatorySignPart<M, B> &\n    AWSS3NonMultipartWithoutCompanionMandatory<M, B>,\n  M,\n  B\n> {\n  static VERSION = packageJson.version\n\n  #companionCommunicationQueue\n\n  #client: RequestClient<M, B>\n\n  protected requests: any\n\n  protected uploaderEvents: Record<string, EventManager<M, B> | null>\n\n  protected uploaders: Record<string, MultipartUploader<M, B> | null>\n\n  protected uploaderSockets: Record<string, never>\n\n  constructor(uppy: Uppy<M, B>, opts?: AwsS3MultipartOptions<M, B>) {\n    super(uppy, {\n      ...defaultOptions,\n      uploadPartBytes: AwsS3Multipart.uploadPartBytes,\n      createMultipartUpload: null as any,\n      listParts: null as any,\n      abortMultipartUpload: null as any,\n      completeMultipartUpload: null as any,\n      signPart: null as any,\n      getUploadParameters: null as any,\n      ...opts,\n    })\n    // We need the `as any` here because of the dynamic default options.\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3Multipart'\n    // @ts-expect-error TODO: remove unused\n    this.title = 'AWS S3 Multipart'\n    // TODO: only initiate `RequestClient` is `companionUrl` is defined.\n    this.#client = new RequestClient(uppy, opts as any)\n\n    const dynamicDefaultOptions = {\n      createMultipartUpload: this.createMultipartUpload,\n      listParts: this.listParts,\n      abortMultipartUpload: this.abortMultipartUpload,\n      completeMultipartUpload: this.completeMultipartUpload,\n      signPart:\n        opts?.getTemporarySecurityCredentials ?\n          this.createSignedURL\n        : this.signPart,\n      getUploadParameters:\n        opts?.getTemporarySecurityCredentials ?\n          (this.createSignedURL as any)\n        : this.getUploadParameters,\n    } satisfies Partial<AwsS3MultipartOptions<M, B>>\n\n    for (const key of Object.keys(dynamicDefaultOptions)) {\n      if (this.opts[key as keyof typeof dynamicDefaultOptions] == null) {\n        this.opts[key as keyof typeof dynamicDefaultOptions] =\n          dynamicDefaultOptions[key as keyof typeof dynamicDefaultOptions].bind(\n            this,\n          )\n      }\n    }\n    if (\n      (opts as AWSS3MultipartWithoutCompanionMandatoryPrepareUploadParts<M, B>)\n        ?.prepareUploadParts != null &&\n      (opts as AWSS3MultipartWithoutCompanionMandatorySignPart<M, B>)\n        .signPart == null\n    ) {\n      this.opts.signPart = async (\n        file: UppyFile<M, B>,\n        { uploadId, key, partNumber, body, signal }: SignPartOptions,\n      ) => {\n        const { presignedUrls, headers } = await (\n          opts as AWSS3MultipartWithoutCompanionMandatoryPrepareUploadParts<\n            M,\n            B\n          >\n        ).prepareUploadParts(file, {\n          uploadId,\n          key,\n          parts: [{ number: partNumber, chunk: body }],\n          signal,\n        })\n        return {\n          url: presignedUrls?.[partNumber],\n          headers: headers?.[partNumber],\n        }\n      }\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests =\n      (this.opts as any).rateLimitedQueue ??\n      new RateLimitedQueue(this.opts.limit)\n    this.#companionCommunicationQueue = new HTTPCommunicationQueue(\n      this.requests,\n      this.opts,\n      this.#setS3MultipartState,\n      this.#getFile,\n    )\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n    this.uploaderSockets = Object.create(null)\n  }\n\n  private [Symbol.for('uppy test: getClient')]() {\n    return this.#client\n  }\n\n  setOptions(newOptions: Partial<AwsS3MultipartOptions<M, B>>): void {\n    this.#companionCommunicationQueue.setOptions(newOptions)\n    super.setOptions(newOptions)\n    this.#setCompanionHeaders()\n  }\n\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n  resetUploaderReferences(fileID: string, opts?: { abort: boolean }): void {\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID]!.abort({ really: opts?.abort || false })\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID]!.remove()\n      this.uploaderEvents[fileID] = null\n    }\n    if (this.uploaderSockets[fileID]) {\n      // @ts-expect-error TODO: remove this block in the next major\n      this.uploaderSockets[fileID].close()\n      // @ts-expect-error TODO: remove this block in the next major\n      this.uploaderSockets[fileID] = null\n    }\n  }\n\n  // TODO: make this a private method in the next major\n  assertHost(method: string): void {\n    if (!this.opts.companionUrl) {\n      throw new Error(\n        `Expected a \\`companionUrl\\` option containing a Companion address, or if you are not using Companion, a custom \\`${method}\\` implementation.`,\n      )\n    }\n  }\n\n  createMultipartUpload(\n    file: UppyFile<M, B>,\n    signal?: AbortSignal,\n  ): Promise<UploadResult> {\n    this.assertHost('createMultipartUpload')\n    throwIfAborted(signal)\n\n    const metadata = getAllowedMetadata({\n      meta: file.meta,\n      allowedMetaFields: this.opts.allowedMetaFields,\n    })\n\n    return this.#client\n      .post<UploadResult>(\n        's3/multipart',\n        {\n          filename: file.name,\n          type: file.type,\n          metadata,\n        },\n        { signal },\n      )\n      .then(assertServerError)\n  }\n\n  listParts(\n    file: UppyFile<M, B>,\n    { key, uploadId, signal }: UploadResultWithSignal,\n    oldSignal?: AbortSignal,\n  ): Promise<AwsS3Part[]> {\n    signal ??= oldSignal // eslint-disable-line no-param-reassign\n    this.assertHost('listParts')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    return this.#client\n      .get<AwsS3Part[]>(`s3/multipart/${uploadId}?key=${filename}`, { signal })\n      .then(assertServerError)\n  }\n\n  completeMultipartUpload(\n    file: UppyFile<M, B>,\n    { key, uploadId, parts, signal }: MultipartUploadResultWithSignal,\n    oldSignal?: AbortSignal,\n  ): Promise<B> {\n    signal ??= oldSignal // eslint-disable-line no-param-reassign\n    this.assertHost('completeMultipartUpload')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client\n      .post<B>(\n        `s3/multipart/${uploadIdEnc}/complete?key=${filename}`,\n        { parts },\n        { signal },\n      )\n      .then(assertServerError)\n  }\n\n  #cachedTemporaryCredentials: MaybePromise<AwsS3STSResponse>\n\n  async #getTemporarySecurityCredentials(options?: RequestOptions) {\n    throwIfAborted(options?.signal)\n\n    if (this.#cachedTemporaryCredentials == null) {\n      // We do not await it just yet, so concurrent calls do not try to override it:\n      if (this.opts.getTemporarySecurityCredentials === true) {\n        this.assertHost('getTemporarySecurityCredentials')\n        this.#cachedTemporaryCredentials = this.#client\n          .get<AwsS3STSResponse>('s3/sts', options)\n          .then(assertServerError)\n      } else {\n        this.#cachedTemporaryCredentials =\n          this.opts.getTemporarySecurityCredentials(options)\n      }\n      this.#cachedTemporaryCredentials = await this.#cachedTemporaryCredentials\n      setTimeout(\n        () => {\n          // At half the time left before expiration, we clear the cache. That's\n          // an arbitrary tradeoff to limit the number of requests made to the\n          // remote while limiting the risk of using an expired token in case the\n          // clocks are not exactly synced.\n          // The HTTP cache should be configured to ensure a client doesn't request\n          // more tokens than it needs, but this timeout provides a second layer of\n          // security in case the HTTP cache is disabled or misconfigured.\n          this.#cachedTemporaryCredentials = null as any\n        },\n        (getExpiry(this.#cachedTemporaryCredentials.credentials) || 0) * 500,\n      )\n    }\n\n    return this.#cachedTemporaryCredentials\n  }\n\n  async createSignedURL(\n    file: UppyFile<M, B>,\n    options: SignPartOptions,\n  ): Promise<AwsS3UploadParameters> {\n    const data = await this.#getTemporarySecurityCredentials(options)\n    const expires = getExpiry(data.credentials) || 604_800 // 604 800 is the max value accepted by AWS.\n\n    const { uploadId, key, partNumber } = options\n\n    // Return an object in the correct shape.\n    return {\n      method: 'PUT',\n      expires,\n      fields: {},\n      url: `${await createSignedURL({\n        accountKey: data.credentials.AccessKeyId,\n        accountSecret: data.credentials.SecretAccessKey,\n        sessionToken: data.credentials.SessionToken,\n        expires,\n        bucketName: data.bucket,\n        Region: data.region,\n        Key: key ?? `${crypto.randomUUID()}-${file.name}`,\n        uploadId,\n        partNumber,\n      })}`,\n      // Provide content type header required by S3\n      headers: {\n        'Content-Type': file.type as string,\n      },\n    }\n  }\n\n  signPart(\n    file: UppyFile<M, B>,\n    { uploadId, key, partNumber, signal }: SignPartOptions,\n  ): Promise<AwsS3UploadParameters> {\n    this.assertHost('signPart')\n    throwIfAborted(signal)\n\n    if (uploadId == null || key == null || partNumber == null) {\n      throw new Error(\n        'Cannot sign without a key, an uploadId, and a partNumber',\n      )\n    }\n\n    const filename = encodeURIComponent(key)\n    return this.#client\n      .get<AwsS3UploadParameters>(\n        `s3/multipart/${uploadId}/${partNumber}?key=${filename}`,\n        { signal },\n      )\n      .then(assertServerError)\n  }\n\n  abortMultipartUpload(\n    file: UppyFile<M, B>,\n    { key, uploadId, signal }: UploadResultWithSignal,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    oldSignal?: AbortSignal, // TODO: remove in next major\n  ): Promise<void> {\n    signal ??= oldSignal // eslint-disable-line no-param-reassign\n    this.assertHost('abortMultipartUpload')\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client\n      .delete<void>(`s3/multipart/${uploadIdEnc}?key=${filename}`, undefined, {\n        signal,\n      })\n      .then(assertServerError)\n  }\n\n  getUploadParameters(\n    file: UppyFile<M, B>,\n    options: RequestOptions,\n  ): Promise<AwsS3UploadParameters> {\n    const { meta } = file\n    const { type, name: filename } = meta\n    const metadata = getAllowedMetadata({\n      meta,\n      allowedMetaFields: this.opts.allowedMetaFields,\n      querify: true,\n    })\n\n    const query = new URLSearchParams({ filename, type, ...metadata } as Record<\n      string,\n      string\n    >)\n\n    return this.#client.get(`s3/params?${query}`, options)\n  }\n\n  static async uploadPartBytes({\n    signature: { url, expires, headers, method = 'PUT' },\n    body,\n    size = (body as Blob).size,\n    onProgress,\n    onComplete,\n    signal,\n  }: {\n    signature: AwsS3UploadParameters\n    body: FormData | Blob\n    size?: number\n    onProgress: any\n    onComplete: any\n    signal?: AbortSignal\n  }): Promise<UploadPartBytesResult> {\n    throwIfAborted(signal)\n\n    if (url == null) {\n      throw new Error('Cannot upload to an undefined URL')\n    }\n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest()\n      xhr.open(method, url, true)\n      if (headers) {\n        Object.keys(headers).forEach((key) => {\n          xhr.setRequestHeader(key, headers[key])\n        })\n      }\n      xhr.responseType = 'text'\n      if (typeof expires === 'number') {\n        xhr.timeout = expires * 1000\n      }\n\n      function onabort() {\n        xhr.abort()\n      }\n      function cleanup() {\n        signal?.removeEventListener('abort', onabort)\n      }\n      signal?.addEventListener('abort', onabort)\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        onProgress(ev)\n      })\n\n      xhr.addEventListener('abort', () => {\n        cleanup()\n\n        reject(createAbortError())\n      })\n\n      xhr.addEventListener('timeout', () => {\n        cleanup()\n\n        const error = new Error('Request has expired')\n        ;(error as any).source = { status: 403 }\n        reject(error)\n      })\n      xhr.addEventListener('load', (ev) => {\n        cleanup()\n\n        if (\n          xhr.status === 403 &&\n          xhr.responseText.includes('<Message>Request has expired</Message>')\n        ) {\n          const error = new Error('Request has expired')\n          ;(error as any).source = xhr\n          reject(error)\n          return\n        }\n        if (xhr.status < 200 || xhr.status >= 300) {\n          const error = new Error('Non 2xx')\n          ;(error as any).source = xhr\n          reject(error)\n          return\n        }\n\n        // todo make a proper onProgress API (breaking change)\n        onProgress?.({ loaded: size, lengthComputable: true })\n\n        // NOTE This must be allowed by CORS.\n        const etag = xhr.getResponseHeader('ETag')\n        const location = xhr.getResponseHeader('Location')\n\n        if (method.toUpperCase() === 'POST' && location === null) {\n          // Not being able to read the Location header is not a fatal error.\n          // eslint-disable-next-line no-console\n          console.warn(\n            'AwsS3/Multipart: Could not read the Location header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.',\n          )\n        }\n        if (etag === null) {\n          reject(\n            new Error(\n              'AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.',\n            ),\n          )\n          return\n        }\n\n        onComplete?.(etag)\n        resolve({\n          ETag: etag,\n          ...(location ? { location } : undefined),\n        })\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        cleanup()\n\n        const error = new Error('Unknown error')\n        ;(error as any).source = ev.target\n        reject(error)\n      })\n\n      xhr.send(body)\n    })\n  }\n\n  #setS3MultipartState = (\n    file: UppyFile<M, B>,\n    { key, uploadId }: UploadResult,\n  ) => {\n    const cFile = this.uppy.getFile(file.id)\n    if (cFile == null) {\n      // file was removed from store\n      return\n    }\n\n    this.uppy.setFileState(file.id, {\n      s3Multipart: {\n        ...(cFile as MultipartFile<M, B>).s3Multipart,\n        key,\n        uploadId,\n      },\n    } as Partial<MultipartFile<M, B>>)\n  }\n\n  #getFile = (file: UppyFile<M, B>) => {\n    return this.uppy.getFile(file.id) || file\n  }\n\n  #uploadLocalFile(file: UppyFile<M, B>) {\n    return new Promise<void | string>((resolve, reject) => {\n      const onProgress = (bytesUploaded: number, bytesTotal: number) => {\n        this.uppy.emit('upload-progress', this.uppy.getFile(file.id), {\n          // @ts-expect-error TODO: figure out if we need this\n          uploader: this,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      const onError = (err: unknown) => {\n        this.uppy.log(err as Error)\n        this.uppy.emit('upload-error', file, err as Error)\n\n        this.resetUploaderReferences(file.id)\n        reject(err)\n      }\n\n      const onSuccess = (result: B) => {\n        const uploadResp = {\n          body: {\n            ...result,\n          },\n          status: 200,\n          uploadURL: result.location,\n        }\n\n        this.resetUploaderReferences(file.id)\n\n        this.uppy.emit('upload-success', this.#getFile(file), uploadResp)\n\n        if (result.location) {\n          this.uppy.log(`Download ${file.name} from ${result.location}`)\n        }\n\n        resolve()\n      }\n\n      const upload = new MultipartUploader<M, B>(file.data, {\n        // .bind to pass the file object to each handler.\n        companionComm: this.#companionCommunicationQueue,\n\n        log: (...args: Parameters<Uppy<M, B>['log']>) => this.uppy.log(...args),\n        getChunkSize:\n          this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : null,\n\n        onProgress,\n        onError,\n        onSuccess,\n        onPartComplete: (part) => {\n          this.uppy.emit(\n            's3-multipart:part-uploaded',\n            this.#getFile(file),\n            part,\n          )\n        },\n\n        file,\n        shouldUseMultipart: this.opts.shouldUseMultipart,\n\n        ...(file as MultipartFile<M, B>).s3Multipart,\n      })\n\n      this.uploaders[file.id] = upload\n      const eventManager = new EventManager(this.uppy)\n      this.uploaderEvents[file.id] = eventManager\n\n      eventManager.onFileRemove(file.id, (removed) => {\n        upload.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${removed} was removed`)\n      })\n\n      eventManager.onCancelAll(file.id, (options) => {\n        if (options?.reason === 'user') {\n          upload.abort()\n          this.resetUploaderReferences(file.id, { abort: true })\n        }\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      eventManager.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          upload.pause()\n        } else {\n          upload.start()\n        }\n      })\n\n      eventManager.onPauseAll(file.id, () => {\n        upload.pause()\n      })\n\n      eventManager.onResumeAll(file.id, () => {\n        upload.start()\n      })\n\n      upload.start()\n    })\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  #getCompanionClientArgs(file: UppyFile<M, B>) {\n    return {\n      ...file.remote?.body,\n      protocol: 's3-multipart',\n      size: file.data.size,\n      metadata: file.meta,\n    }\n  }\n\n  #upload = async (fileIDs: string[]) => {\n    if (fileIDs.length === 0) return undefined\n\n    const files = this.uppy.getFilesByIds(fileIDs)\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n\n    this.uppy.emit('upload-start', filesToEmit)\n\n    const promises = filesFiltered.map((file) => {\n      if (file.isRemote) {\n        const getQueue = () => this.requests\n        this.#setResumableUploadsCapability(false)\n        const controller = new AbortController()\n\n        const removedHandler = (removedFile: UppyFile<M, B>) => {\n          if (removedFile.id === file.id) controller.abort()\n        }\n        this.uppy.on('file-removed', removedHandler)\n\n        const uploadPromise = this.uppy\n          .getRequestClientForFile<RequestClient<M, B>>(file)\n          .uploadRemoteFile(file, this.#getCompanionClientArgs(file), {\n            signal: controller.signal,\n            getQueue,\n          })\n\n        this.requests.wrapSyncFunction(\n          () => {\n            this.uppy.off('file-removed', removedHandler)\n          },\n          { priority: -1 },\n        )()\n\n        return uploadPromise\n      }\n\n      return this.#uploadLocalFile(file)\n    })\n\n    const upload = await Promise.all(promises)\n    // After the upload is done, another upload may happen with only local files.\n    // We reset the capability so that the next upload can use resumable uploads.\n    this.#setResumableUploadsCapability(true)\n    return upload\n  }\n\n  #setCompanionHeaders = () => {\n    this.#client.setCompanionHeaders(this.opts.companionHeaders)\n  }\n\n  #setResumableUploadsCapability = (boolean: boolean) => {\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        resumableUploads: boolean,\n      },\n    })\n  }\n\n  #resetResumableCapability = () => {\n    this.#setResumableUploadsCapability(true)\n  }\n\n  install(): void {\n    this.#setResumableUploadsCapability(true)\n    this.uppy.addPreProcessor(this.#setCompanionHeaders)\n    this.uppy.addUploader(this.#upload)\n    this.uppy.on('cancel-all', this.#resetResumableCapability)\n  }\n\n  uninstall(): void {\n    this.uppy.removePreProcessor(this.#setCompanionHeaders)\n    this.uppy.removeUploader(this.#upload)\n    this.uppy.off('cancel-all', this.#resetResumableCapability)\n  }\n}\n\nexport type uploadPartBytes = (typeof AwsS3Multipart<\n  any,\n  any\n>)['uploadPartBytes']\n"],"mappings":"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"}
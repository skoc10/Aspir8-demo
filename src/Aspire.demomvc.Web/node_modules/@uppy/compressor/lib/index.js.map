{"version":3,"names":["BasePlugin","RateLimitedQueue","getFileNameAndExtension","prettierBytes","CompressorJS","locale","_RateLimitedQueue","_classPrivateFieldLooseKey","Compressor","constructor","uppy","opts","Object","defineProperty","writable","value","id","type","defaultLocale","defaultOptions","quality","limit","_classPrivateFieldLooseBase","i18nInit","prepareUpload","bind","compress","blob","Promise","resolve","reject","success","error","fileIDs","totalCompressedSize","compressedFiles","compressAndApplyResult","wrapPromiseFunction","file","compressedBlob","data","compressedSavingsSize","size","log","name","compressedFileName","metaFileName","meta","newMetaName","extension","setFileState","push","err","promises","map","fileID","_file$type","getFile","emit","mode","message","i18n","isRemote","slice","startsWith","all","info","install","addPreProcessor","uninstall","removePreProcessor"],"sources":["index.ts"],"sourcesContent":["import { BasePlugin, Uppy } from '@uppy/core'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport prettierBytes from '@transloadit/prettier-bytes'\nimport CompressorJS from 'compressorjs'\n\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { PluginOpts } from '@uppy/core/lib/BasePlugin'\n\nimport locale from './locale.ts'\n\ndeclare module '@uppy/core' {\n  export interface UppyEventMap<M extends Meta, B extends Body> {\n    'compressor:complete': (file: UppyFile<M, B>[]) => void\n  }\n}\n\nexport interface CompressorOpts extends PluginOpts, CompressorJS.Options {\n  quality: number\n  limit?: number\n}\n\nexport default class Compressor<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<CompressorOpts, M, B> {\n  #RateLimitedQueue\n\n  constructor(uppy: Uppy<M, B>, opts: CompressorOpts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'Compressor'\n    this.type = 'modifier'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      quality: 0.6,\n      limit: 10,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.#RateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.compress = this.compress.bind(this)\n  }\n\n  compress(blob: Blob): Promise<Blob | File> {\n    return new Promise((resolve, reject) => {\n      /* eslint-disable no-new */\n      new CompressorJS(blob, {\n        ...this.opts,\n        success: resolve,\n        error: reject,\n      })\n    })\n  }\n\n  async prepareUpload(fileIDs: string[]): Promise<void> {\n    let totalCompressedSize = 0\n    const compressedFiles: UppyFile<M, B>[] = []\n    const compressAndApplyResult = this.#RateLimitedQueue.wrapPromiseFunction(\n      async (file: UppyFile<M, B>) => {\n        try {\n          const compressedBlob = await this.compress(file.data)\n          const compressedSavingsSize = file.data.size - compressedBlob.size\n          this.uppy.log(\n            `[Image Compressor] Image ${file.id} compressed by ${prettierBytes(compressedSavingsSize)}`,\n          )\n          totalCompressedSize += compressedSavingsSize\n          const { name, type, size } = compressedBlob\n\n          const compressedFileName = getFileNameAndExtension(name)\n          const metaFileName = getFileNameAndExtension(file.meta.name)\n\n          // Name (file.meta.name) might have been changed by user, so we update only the extension\n          const newMetaName = `${metaFileName.name}.${compressedFileName.extension}`\n\n          this.uppy.setFileState(file.id, {\n            ...(name && { name }),\n            ...(compressedFileName.extension && {\n              extension: compressedFileName.extension,\n            }),\n            ...(type && { type }),\n            ...(size && { size }),\n            data: compressedBlob,\n            meta: {\n              ...file.meta,\n              type,\n              name: newMetaName,\n            },\n          })\n          compressedFiles.push(file)\n        } catch (err) {\n          this.uppy.log(\n            `[Image Compressor] Failed to compress ${file.id}:`,\n            'warning',\n          )\n          this.uppy.log(err, 'warning')\n        }\n      },\n    )\n\n    const promises = fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      this.uppy.emit('preprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('compressingImages'),\n      })\n\n      if (file.isRemote) {\n        return Promise.resolve()\n      }\n\n      // Some browsers (Firefox) add blobs with empty file type, when files are\n      // added from a folder. Uppy auto-detects type from extension, but leaves the original blob intact.\n      // However, Compressor.js failes when file has no type, so we set it here\n      if (!file.data.type) {\n        file.data = file.data.slice(0, file.data.size, file.type)\n      }\n\n      if (!file.type?.startsWith('image/')) {\n        return Promise.resolve()\n      }\n\n      return compressAndApplyResult(file)\n    })\n\n    // Why emit `preprocess-complete` for all files at once, instead of\n    // above when each is processed?\n    // Because it leads to StatusBar showing a weird “upload 6 files” button,\n    // while waiting for all the files to complete pre-processing.\n    await Promise.all(promises)\n\n    this.uppy.emit('compressor:complete', compressedFiles)\n\n    // Only show informer if Compressor mananged to save at least a kilobyte\n    if (totalCompressedSize > 1024) {\n      this.uppy.info(\n        this.i18n('compressedX', {\n          size: prettierBytes(totalCompressedSize),\n        }),\n        'info',\n      )\n    }\n\n    for (const fileID of fileIDs) {\n      const file = this.uppy.getFile(fileID)\n      this.uppy.emit('preprocess-complete', file)\n    }\n  }\n\n  install(): void {\n    this.uppy.addPreProcessor(this.prepareUpload)\n  }\n\n  uninstall(): void {\n    this.uppy.removePreProcessor(this.prepareUpload)\n  }\n}\n"],"mappings":"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"}
{"version":3,"names":["BasePlugin","AwsS3Multipart","RateLimitedQueue","internalRateLimitedQueue","RequestClient","filterNonFailedFiles","filterFilesToEmitUploadStarted","packageJson","MiniXHRUpload","isXml","locale","resolveUrl","origin","link","startsWith","URL","undefined","toString","getXmlValue","source","tagName","start","indexOf","end","slice","length","assertServerError","res","error","Error","message","Object","assign","validateParameters","file","params","valid","url","fields","err","TypeError","name","JSON","stringify","methodIsValid","method","test","defaultGetResponseError","content","xhr","warnedSuccessActionStatus","_client","_classPrivateFieldLooseKey","_requests","_uploader","_handleUpload","_setCompanionHeaders","_getCompanionClientArgs","_Symbol$for","Symbol","for","AwsS3","constructor","uppy","opts","shouldUseMultipart","defineProperty","writable","value","fileIDs","paramsPromises","create","onremove","_paramsPromises$id","id","abort","on","files","getFilesByIds","filesFiltered","filesToEmit","emit","getUploadParameters","_classPrivateFieldLooseBase","wrapPromiseFunction","numberOfFiles","Promise","allSettled","map","index","getFile","then","headers","xhrOpts","formData","toUpperCase","endpoint","allowedMetaFields","keys","setFileState","meta","xhrUpload","uploadFile","catch","reject","finally","off","setCompanionHeaders","companionHeaders","resolve","getOptions","Array","isArray","remote","body","protocol","size","data","fieldname","fieldName","metadata","fromEntries","httpMethod","useFormData","type","title","defaultLocale","defaultOptions","timeout","limit","bind","i18nInit","client","companionUrl","filename","filter","key","query","URLSearchParams","get","current","total","log","isRemote","getQueue","controller","AbortController","removedHandler","removedFile","uploadPromise","getRequestClientForFile","uploadRemoteFile","signal","wrapSyncFunction","priority","uploadLocalFile","install","addPreProcessor","addUploader","defaultGetResponseData","location","responseURL","replace","bucket","etag","xhrOptions","responseUrlFieldName","responseType","getResponseData","getResponseError","i18n","uninstall","removePreProcessor","removeUploader","VERSION","version"],"sources":["index.js"],"sourcesContent":["/**\n * This plugin is currently a A Big Hack™! The core reason for that is how this plugin\n * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,\n * including preprocessing, uploading, and postprocessing steps. This plugin initially\n * was designed to do its work in a preprocessing step, and let XHRUpload deal with the\n * actual file upload as an uploading step. However, Uppy runs steps on all files at once,\n * sequentially: first, all files go through a preprocessing step, then, once they are all\n * done, they go through the uploading step.\n *\n * For S3, this causes severely broken behaviour when users upload many files. The\n * preprocessing step will request S3 upload URLs that are valid for a short time only,\n * but it has to do this for _all_ files, which can take a long time if there are hundreds\n * or even thousands of files. By the time the uploader step starts, the first URLs may\n * already have expired. If not, the uploading might take such a long time that later URLs\n * will expire before some files can be uploaded.\n *\n * The long-term solution to this problem is to change the upload pipeline so that files\n * can be sent to the next step individually. That requires a breaking change, so it is\n * planned for some future Uppy version.\n *\n * In the mean time, this plugin is stuck with a hackier approach: the necessary parts\n * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload\n * class, and this plugin calls into it immediately once it receives an upload URL.\n * This isn't as nicely modular as we'd like and requires us to maintain two copies of\n * the XHRUpload code, but at least it's not horrifically broken :)\n */\n\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport AwsS3Multipart from '@uppy/aws-s3-multipart'\nimport { RateLimitedQueue, internalRateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport { RequestClient } from '@uppy/companion-client'\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters'\n\nimport packageJson from '../package.json'\nimport MiniXHRUpload from './MiniXHRUpload.js'\nimport isXml from './isXml.js'\nimport locale from './locale.js'\n\nfunction resolveUrl (origin, link) {\n  // DigitalOcean doesn’t return the protocol from Location\n  // without it, the `new URL` constructor will fail\n  if (!origin && !link.startsWith('https://') && !link.startsWith('http://')) {\n    link = `https://${link}` // eslint-disable-line no-param-reassign\n  }\n  return new URL(link, origin || undefined).toString()\n}\n\n/**\n * Get the contents of a named tag in an XML source string.\n *\n * @param {string} source - The XML source string.\n * @param {string} tagName - The name of the tag.\n * @returns {string} The contents of the tag, or the empty string if the tag does not exist.\n */\nfunction getXmlValue (source, tagName) {\n  const start = source.indexOf(`<${tagName}>`)\n  const end = source.indexOf(`</${tagName}>`, start)\n  return start !== -1 && end !== -1\n    ? source.slice(start + tagName.length + 2, end)\n    : ''\n}\n\nfunction assertServerError (res) {\n  if (res && res.error) {\n    const error = new Error(res.message)\n    Object.assign(error, res.error)\n    throw error\n  }\n  return res\n}\n\nfunction validateParameters (file, params) {\n  const valid = params != null\n    && typeof params.url === 'string'\n    && (typeof params.fields === 'object' || params.fields == null)\n\n  if (!valid) {\n    const err = new TypeError(`AwsS3: got incorrect result from 'getUploadParameters()' for file '${file.name}', expected an object '{ url, method, fields, headers }' but got '${JSON.stringify(params)}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n    throw err\n  }\n\n  const methodIsValid = params.method == null || /^p(u|os)t$/i.test(params.method)\n\n  if (!methodIsValid) {\n    const err = new TypeError(`AwsS3: got incorrect method from 'getUploadParameters()' for file '${file.name}', expected  'PUT' or 'POST' but got '${params.method}' instead.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n    throw err\n  }\n}\n\n// Get the error data from a failed XMLHttpRequest instance.\n// `content` is the S3 response as a string.\n// `xhr` is the XMLHttpRequest instance.\nfunction defaultGetResponseError (content, xhr) {\n  // If no response, we don't have a specific error message, use the default.\n  if (!isXml(content, xhr)) {\n    return undefined\n  }\n  const error = getXmlValue(content, 'Message')\n  return new Error(error)\n}\n\n// warning deduplication flag: see `getResponseData()` XHRUpload option definition\nlet warnedSuccessActionStatus = false\n\n// TODO deprecate this, will use s3-multipart instead\nexport default class AwsS3 extends BasePlugin {\n  static VERSION = packageJson.version\n\n  #client\n\n  #requests\n\n  #uploader\n\n  constructor (uppy, opts) {\n    // Opt-in to using the multipart plugin, which is going to be the only S3 plugin as of the next semver.\n    if (opts?.shouldUseMultipart != null) {\n      return new AwsS3Multipart(uppy, opts)\n    }\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3'\n    this.title = 'AWS S3'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      allowedMetaFields: [], // have to opt in\n      getUploadParameters: this.getUploadParameters.bind(this),\n      shouldUseMultipart: false,\n      companionHeaders: {},\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error('The `metaFields` option has been renamed to `allowedMetaFields`.')\n    }\n\n    // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload\n    this.i18nInit()\n\n    this.#client = new RequestClient(uppy, opts)\n    this.#requests = new RateLimitedQueue(this.opts.limit)\n  }\n\n  [Symbol.for('uppy test: getClient')] () { return this.#client }\n\n  // TODO: remove getter and setter for #client on the next major release\n  get client () { return this.#client }\n\n  set client (client) { this.#client = client }\n\n  getUploadParameters (file) {\n    if (!this.opts.companionUrl) {\n      throw new Error('Expected a `companionUrl` option containing a Companion address.')\n    }\n\n    const filename = file.meta.name\n    const { type } = file.meta\n    const metadata = Object.fromEntries(\n      this.opts.allowedMetaFields\n        .filter(key => file.meta[key] != null)\n        .map(key => [`metadata[${key}]`, file.meta[key].toString()]),\n    )\n\n    const query = new URLSearchParams({ filename, type, ...metadata })\n    return this.#client.get(`s3/params?${query}`)\n      .then(assertServerError)\n  }\n\n  #handleUpload = async (fileIDs) => {\n    /**\n     * keep track of `getUploadParameters()` responses\n     * so we can cancel the calls individually using just a file ID\n     *\n     * @type {Record<string, import('@uppy/utils/lib/RateLimitedQueue').AbortablePromise<unknown>>}\n     */\n    const paramsPromises = Object.create(null)\n\n    function onremove (file) {\n      const { id } = file\n      paramsPromises[id]?.abort()\n    }\n    this.uppy.on('file-removed', onremove)\n\n    const files = this.uppy.getFilesByIds(fileIDs)\n\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    const getUploadParameters = this.#requests.wrapPromiseFunction((file) => {\n      return this.opts.getUploadParameters(file)\n    })\n\n    const numberOfFiles = fileIDs.length\n\n    return Promise.allSettled(fileIDs.map((id, index) => {\n      paramsPromises[id] = getUploadParameters(this.uppy.getFile(id))\n      return paramsPromises[id].then((params) => {\n        delete paramsPromises[id]\n\n        const file = this.uppy.getFile(id)\n        validateParameters(file, params)\n\n        const {\n          method = 'POST',\n          url,\n          fields,\n          headers,\n        } = params\n        const xhrOpts = {\n          method,\n          formData: method.toUpperCase() === 'POST',\n          endpoint: url,\n          allowedMetaFields: fields ? Object.keys(fields) : [],\n        }\n\n        if (headers) {\n          xhrOpts.headers = headers\n        }\n\n        this.uppy.setFileState(file.id, {\n          meta: { ...file.meta, ...fields },\n          xhrUpload: xhrOpts,\n        })\n\n        return this.uploadFile(file.id, index, numberOfFiles)\n      }).catch((error) => {\n        delete paramsPromises[id]\n\n        const file = this.uppy.getFile(id)\n        this.uppy.emit('upload-error', file, error)\n        return Promise.reject(error)\n      })\n    })).finally(() => {\n      // cleanup.\n      this.uppy.off('file-removed', onremove)\n    })\n  }\n\n  #setCompanionHeaders = () => {\n    this.#client.setCompanionHeaders(this.opts.companionHeaders)\n    return Promise.resolve()\n  }\n\n  #getCompanionClientArgs = (file) => {\n    const opts = this.#uploader.getOptions(file)\n    const allowedMetaFields = Array.isArray(opts.allowedMetaFields)\n      ? opts.allowedMetaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    return {\n      ...file.remote.body,\n      protocol: 'multipart',\n      endpoint: opts.endpoint,\n      size: file.data.size,\n      fieldname: opts.fieldName,\n      metadata: Object.fromEntries(allowedMetaFields.map(name => [name, file.meta[name]])),\n      httpMethod: opts.method,\n      useFormData: opts.formData,\n      headers: typeof opts.headers === 'function' ? opts.headers(file) : opts.headers,\n    }\n  }\n\n  uploadFile (id, current, total) {\n    const file = this.uppy.getFile(id)\n    this.uppy.log(`uploading ${current} of ${total}`)\n\n    if (file.error) throw new Error(file.error)\n\n    if (file.isRemote) {\n      const getQueue = () => this.#requests\n      const controller = new AbortController()\n\n      const removedHandler = (removedFile) => {\n        if (removedFile.id === file.id) controller.abort()\n      }\n      this.uppy.on('file-removed', removedHandler)\n\n      const uploadPromise = this.uppy.getRequestClientForFile(file).uploadRemoteFile(\n        file,\n        this.#getCompanionClientArgs(file),\n        { signal: controller.signal, getQueue },\n      )\n\n      this.#requests.wrapSyncFunction(() => {\n        this.uppy.off('file-removed', removedHandler)\n      }, { priority: -1 })()\n\n      return uploadPromise\n    }\n\n    return this.#uploader.uploadLocalFile(file, current, total)\n  }\n\n  install () {\n    const { uppy } = this\n    uppy.addPreProcessor(this.#setCompanionHeaders)\n    uppy.addUploader(this.#handleUpload)\n\n    // Get the response data from a successful XMLHttpRequest instance.\n    // `content` is the S3 response as a string.\n    // `xhr` is the XMLHttpRequest instance.\n    function defaultGetResponseData (content, xhr) {\n      const opts = this\n\n      // If no response, we've hopefully done a PUT request to the file\n      // in the bucket on its full URL.\n      if (!isXml(content, xhr)) {\n        if (opts.method.toUpperCase() === 'POST') {\n          if (!warnedSuccessActionStatus) {\n            uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning')\n            warnedSuccessActionStatus = true\n          }\n          // The responseURL won't contain the object key. Give up.\n          return { location: null }\n        }\n\n        // responseURL is not available in older browsers.\n        if (!xhr.responseURL) {\n          return { location: null }\n        }\n\n        // Trim the query string because it's going to be a bunch of presign\n        // parameters for a PUT request—doing a GET request with those will\n        // always result in an error\n        return { location: xhr.responseURL.replace(/\\?.*$/, '') }\n      }\n\n      return {\n        // Some S3 alternatives do not reply with an absolute URL.\n        // Eg DigitalOcean Spaces uses /$bucketName/xyz\n        location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),\n        bucket: getXmlValue(content, 'Bucket'),\n        key: getXmlValue(content, 'Key'),\n        etag: getXmlValue(content, 'ETag'),\n      }\n    }\n\n    const xhrOptions = {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      // Share the rate limiting queue with XHRUpload.\n      [internalRateLimitedQueue]: this.#requests,\n      responseType: 'text',\n      getResponseData: this.opts.getResponseData || defaultGetResponseData,\n      getResponseError: defaultGetResponseError,\n    }\n\n    // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload\n    xhrOptions.i18n = this.i18n\n\n    // Revert to `uppy.use(XHRUpload)` once the big comment block at the top of\n    // this file is solved\n    this.#uploader = new MiniXHRUpload(uppy, xhrOptions)\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#setCompanionHeaders)\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"],"mappings":"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"}
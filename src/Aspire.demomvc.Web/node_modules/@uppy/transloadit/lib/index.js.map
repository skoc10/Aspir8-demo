{"version":3,"names":["hasProperty","ErrorWithCause","RateLimitedQueue","BasePlugin","Tus","Assembly","Client","AssemblyOptionsBuilder","validateParams","AssemblyWatcher","locale","packageJson","sendErrorToConsole","originalErr","err","error","cause","console","COMPANION_URL","COMPANION_ALLOWED_HOSTS","TL_COMPANION","defaultOptions","service","errorReporting","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","signature","params","fields","getAssemblyOptions","limit","retryDelays","clientName","_rateLimitedQueue","_classPrivateFieldLooseKey","_getClientVersion","_attachAssemblyMetadata","_createAssembly","_createAssemblyWatcher","_shouldWaitAfterUpload","_reserveFiles","_onFileUploadURLAvailable","_findFile","_onFileUploadComplete","_onResult","_onAssemblyFinished","_cancelAssembly","_onCancelAll","_getPersistentData","_onRestored","_connectAssembly","_prepareUpload","_afterUpload","_closeAssemblyIfExists","_onError","_onTusError","Transloadit","constructor","uppy","opts","_this","_this$opts","_this$opts$assemblyOp","_this$opts$getAssembl","this","Object","defineProperty","value","_connectAssembly2","_cancelAssembly2","_onAssemblyFinished2","_onResult2","_onFileUploadComplete2","_findFile2","_reserveFiles2","_shouldWaitAfterUpload2","_createAssemblyWatcher2","_createAssembly2","_attachAssemblyMetadata2","_getClientVersion2","writable","rawFile","_file$transloadit","file","getFile","id","transloadit","assembly","assemblies","getPluginState","client","addFile","catch","log","emit","_temp","reason","uploadsAssemblies","assemblyIDs","values","flat","map","assemblyID","getAssembly","Promise","all","_classPrivateFieldLooseBase","setData","pluginData","savedState","previousAssemblies","keys","length","restoreState","files","results","status","entries","uploads","forEach","uploadedFile","state","stepName","result","original_id","localId","push","setPluginState","restoreAssemblies","uploadID","allAssemblyIDs","updateAssemblies","activeAssemblies","update","restored","resolve","then","fileIDs","filesWithoutErrors","filter","mode","message","i18n","createAssembly","_ref","options","fileID","assemblyOptions","build","maybeCreatedAssemblies","createdAssemblies","Boolean","assembly_id","filteredFileIDs","closeSocketConnections","close","addResultData","incompleteFiles","completedFiles","watcher","assemblyWatchers","promise","_this$activeAssemblie","submitError","_file$transloadit2","_err$message","startsWith","_originalRequest","endpoint","originalRequest","getUnderlyingObject","responseURL","type","defaultLocale","i18nInit","rateLimitedQueue","create","install","addPreProcessor","addPostProcessor","on","use","storeFingerprintForResuming","allowedMetaFields","capabilities","getState","setState","individualCancellation","uninstall","removePreProcessor","removePostProcessor","off","getAssemblyFiles","getFiles","_file$transloadit3","list","VERSION","addPluginVersion","pluginName","versionName","plugin","getPlugin","join","meta","assembly_url","filename","name","fieldname","tus","tus_url","addRequestId","remote","test","companionUrl","newHost","companion_url","replace","path","url","newFile","assign","expectedFiles","newAssembly","_ref2","includes","cancelAssembly","updateNumberOfFilesInAssembly","updatedFiles","fileRemovedHandler","fileRemoved","_assembly$status","ok","nbOfRemainingFiles","wrapped","details","idOrArrayOfIds","ids","Array","isArray","filesFromAssembly","reserveFile","i","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","undefined","assemblyId","entry","assembly_ssl_url","getAssemblyStatus","finalStatus","newStatus","progress_combined","connect","version","COMPANION","COMPANION_PATTERN"],"sources":["index.ts"],"sourcesContent":["import hasProperty from '@uppy/utils/lib/hasProperty'\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport type { DefinePluginOpts, PluginOpts } from '@uppy/core/lib/BasePlugin.js'\nimport Tus, { type TusDetailedError } from '@uppy/tus'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { Uppy } from '@uppy/core'\nimport Assembly from './Assembly.ts'\nimport Client, { AssemblyError } from './Client.ts'\nimport AssemblyOptionsBuilder, {\n  validateParams,\n  type OptionsWithRestructuredFields,\n} from './AssemblyOptions.ts'\nimport AssemblyWatcher from './AssemblyWatcher.ts'\n\nimport locale from './locale.ts'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\nexport interface AssemblyFile {\n  id: string\n  name: string\n  basename: string\n  ext: string\n  size: number\n  mime: string\n  type: string\n  field: string\n  md5hash: string\n  is_tus_file: boolean\n  original_md5hash: string\n  original_id: string\n  original_name: string\n  original_basename: string\n  original_path: string\n  url: string\n  ssl_url: string\n  tus_upload_url: string\n  meta: Record<string, any>\n}\n\nexport interface AssemblyResult extends AssemblyFile {\n  cost: number\n  execTime: number\n  queue: string\n  queueTime: number\n  localId: string | null\n}\n\nexport interface AssemblyResponse {\n  ok: string\n  message?: string\n  assembly_id: string\n  parent_id?: string\n  account_id: string\n  template_id?: string\n  instance: string\n  assembly_url: string\n  assembly_ssl_url: string\n  uppyserver_url: string\n  companion_url: string\n  websocket_url: string\n  tus_url: string\n  bytes_received: number\n  bytes_expected: number\n  upload_duration: number\n  client_agent?: string\n  client_ip?: string\n  client_referer?: string\n  transloadit_client: string\n  start_date: string\n  upload_meta_data_extracted: boolean\n  warnings: any[]\n  is_infinite: boolean\n  has_dupe_jobs: boolean\n  execution_start: string\n  execution_duration: number\n  queue_duration: number\n  jobs_queue_duration: number\n  notify_start?: any\n  notify_url?: string\n  notify_status?: any\n  notify_response_code?: any\n  notify_duration?: any\n  last_job_completed?: string\n  fields: Record<string, any>\n  running_jobs: any[]\n  bytes_usage: number\n  executing_jobs: any[]\n  started_jobs: string[]\n  parent_assembly_status: any\n  params: string\n  template?: any\n  merged_params: string\n  uploads: AssemblyFile[]\n  results: Record<string, AssemblyResult[]>\n  build_id: string\n  error?: string\n  stderr?: string\n  stdout?: string\n  reason?: string\n}\n\nconst sendErrorToConsole = (originalErr: Error) => (err: Error) => {\n  const error = new ErrorWithCause('Failed to send error to the client', {\n    cause: err,\n  })\n  // eslint-disable-next-line no-console\n  console.error(error, originalErr)\n}\n\nconst COMPANION_URL = 'https://api2.transloadit.com/companion'\n// Regex matching acceptable postMessage() origins for authentication feedback from companion.\nconst COMPANION_ALLOWED_HOSTS = /\\.transloadit\\.com$/\n// Regex used to check if a Companion address is run by Transloadit.\nconst TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/\n\nexport interface AssemblyParameters {\n  auth: {\n    key: string\n    expires?: string\n  }\n  template_id?: string\n  steps?: { [step: string]: Record<string, unknown> }\n  fields?: { [name: string]: number | string }\n  notify_url?: string\n}\n\nexport interface AssemblyOptions {\n  params?: AssemblyParameters | null\n  fields?: Record<string, string | number> | string[] | null\n  signature?: string | null\n}\n\ninterface BaseOptions extends PluginOpts {\n  service?: string\n  errorReporting?: boolean\n  waitForEncoding?: boolean\n  waitForMetadata?: boolean\n  importFromUploadURLs?: boolean\n  alwaysRunAssembly?: boolean\n  limit?: number\n  clientName?: string | null\n  retryDelays?: number[]\n}\n\nexport type TransloaditOptions<M extends Meta, B extends Body> = BaseOptions &\n  (\n    | {\n        assemblyOptions?:\n          | AssemblyOptions\n          | ((\n              file?: UppyFile<M, B> | null,\n              options?: AssemblyOptions,\n            ) => Promise<AssemblyOptions> | AssemblyOptions)\n        /** @deprecated use `assemblyOptions` instead */\n        getAssemblyOptions?: never | null\n        /** @deprecated use `assemblyOptions` instead */\n        params?: never | null\n        /** @deprecated use `assemblyOptions` instead */\n        fields?: never | null\n        /** @deprecated use `assemblyOptions` instead */\n        signature?: never | null\n      }\n    | {\n        /** @deprecated use `assemblyOptions` instead */\n        getAssemblyOptions?: (\n          file?: UppyFile<M, B> | null,\n        ) => AssemblyOptions | Promise<AssemblyOptions>\n        assemblyOptions?: never\n        /** @deprecated use `assemblyOptions` instead */\n        params?: never | null\n        /** @deprecated use `assemblyOptions` instead */\n        fields?: never | null\n        /** @deprecated use `assemblyOptions` instead */\n        signature?: never | null\n      }\n    | {\n        /** @deprecated use `assemblyOptions` instead */\n        params?: AssemblyParameters | null\n        /** @deprecated use `assemblyOptions` instead */\n        fields?: { [name: string]: number | string } | string[] | null\n        /** @deprecated use `assemblyOptions` instead */\n        signature?: string | null\n        /** @deprecated use `assemblyOptions` instead */\n        getAssemblyOptions?: never | null\n        assemblyOptions?: never\n      }\n  )\n\nconst defaultOptions = {\n  service: 'https://api2.transloadit.com',\n  errorReporting: true,\n  waitForEncoding: false,\n  waitForMetadata: false,\n  alwaysRunAssembly: false,\n  importFromUploadURLs: false,\n  /** @deprecated use `assemblyOptions` instead */\n  signature: null,\n  /** @deprecated use `assemblyOptions` instead */\n  params: null,\n  /** @deprecated use `assemblyOptions` instead */\n  fields: null,\n  /** @deprecated use `assemblyOptions` instead */\n  getAssemblyOptions: null,\n  limit: 20,\n  retryDelays: [7_000, 10_000, 15_000, 20_000],\n  clientName: null,\n} satisfies TransloaditOptions<any, any>\n\nexport type Opts<M extends Meta, B extends Body> = DefinePluginOpts<\n  TransloaditOptions<M, B>,\n  keyof typeof defaultOptions\n>\n\ntype TransloaditState = {\n  assemblies: Record<string, AssemblyResponse>\n  files: Record<\n    string,\n    { assembly: string; id: string; uploadedFile: AssemblyFile }\n  >\n  results: Array<{\n    result: AssemblyResult\n    stepName: string\n    id: string\n    assembly: string\n  }>\n  uploadsAssemblies: Record<string, string[]>\n}\n\ndeclare module '@uppy/core' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export interface UppyEventMap<M extends Meta, B extends Body> {\n    // We're also overriding the `restored` event as it is now populated with Transloadit state.\n    restored: (pluginData: Record<string, TransloaditState>) => void\n    'restore:get-data': (\n      setData: (\n        arg: Record<\n          string,\n          Pick<TransloaditState, 'assemblies' | 'uploadsAssemblies'>\n        >,\n      ) => void,\n    ) => void\n    'transloadit:assembly-created': (\n      assembly: AssemblyResponse,\n      fileIDs: string[],\n    ) => void\n    'transloadit:assembly-cancel': (assembly: AssemblyResponse) => void\n    'transloadit:import-error': (\n      assembly: AssemblyResponse,\n      fileID: string,\n      error: Error,\n    ) => void\n    'transloadit:assembly-error': (\n      assembly: AssemblyResponse,\n      error: Error,\n    ) => void\n    'transloadit:assembly-executing': (assembly: AssemblyResponse) => void\n    'transloadit:assembly-cancelled': (assembly: AssemblyResponse) => void\n    'transloadit:upload': (\n      file: AssemblyFile,\n      assembly: AssemblyResponse,\n    ) => void\n    'transloadit:result': (\n      stepName: string,\n      result: AssemblyResult,\n      assembly: AssemblyResponse,\n    ) => void\n    'transloadit:complete': (assembly: AssemblyResponse) => void\n    'transloadit:execution-progress': (details: {\n      progress_combined?: number\n    }) => void\n  }\n}\n\ndeclare module '@uppy/utils/lib/UppyFile' {\n  // eslint-disable-next-line no-shadow, @typescript-eslint/no-unused-vars\n  export interface UppyFile<M extends Meta, B extends Body> {\n    transloadit?: { assembly: string }\n    tus?: { uploadUrl?: string | null }\n  }\n}\n\n/**\n * Upload files to Transloadit using Tus.\n */\nexport default class Transloadit<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<Opts<M, B>, M, B, TransloaditState> {\n  static VERSION = packageJson.version\n\n  /** @deprecated use `import { COMPANION_URL } from '@uppy/transloadit'` instead. */\n  static COMPANION = COMPANION_URL\n\n  /** @deprecated use `import { COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit'` instead. */\n  static COMPANION_PATTERN = COMPANION_ALLOWED_HOSTS\n\n  #rateLimitedQueue: RateLimitedQueue\n\n  client: Client<M, B>\n\n  activeAssemblies: Record<string, Assembly>\n\n  assemblyWatchers: Record<string, AssemblyWatcher<M, B>>\n\n  completedFiles: Record<string, boolean>\n\n  restored: Promise<void> | null\n\n  constructor(uppy: Uppy<M, B>, opts: TransloaditOptions<M, B>) {\n    super(uppy, { ...defaultOptions, ...opts })\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Transloadit'\n\n    this.defaultLocale = locale\n\n    // TODO: remove this fallback in the next major\n    this.opts.assemblyOptions ??= this.opts.getAssemblyOptions ?? {\n      params: this.opts.params,\n      signature: this.opts.signature,\n      fields: this.opts.fields,\n    }\n\n    // TODO: remove this check in the next major (validating params when creating the assembly should be enough)\n    if (\n      opts?.params != null &&\n      opts.getAssemblyOptions == null &&\n      opts.assemblyOptions == null\n    ) {\n      validateParams((this.opts.assemblyOptions as AssemblyOptions).params)\n    }\n\n    this.#rateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    this.client = new Client({\n      service: this.opts.service,\n      client: this.#getClientVersion(),\n      errorReporting: this.opts.errorReporting,\n      rateLimitedQueue: this.#rateLimitedQueue,\n    })\n    // Contains Assembly instances for in-progress Assemblies.\n    this.activeAssemblies = {}\n    // Contains a mapping of uploadID to AssemblyWatcher\n    this.assemblyWatchers = {}\n    // Contains a file IDs that have completed postprocessing before the upload\n    // they belong to has entered the postprocess stage.\n    this.completedFiles = Object.create(null)\n  }\n\n  #getClientVersion() {\n    const list = [\n      // @ts-expect-error VERSION comes from babel, TS does not understand\n      `uppy-core:${this.uppy.constructor.VERSION}`,\n      // @ts-expect-error VERSION comes from babel, TS does not understand\n      `uppy-transloadit:${this.constructor.VERSION}`,\n      `uppy-tus:${Tus.VERSION}`,\n    ]\n\n    const addPluginVersion = (pluginName: string, versionName: string) => {\n      const plugin = this.uppy.getPlugin(pluginName)\n      if (plugin) {\n        // @ts-expect-error VERSION comes from babel, TS does not understand\n        list.push(`${versionName}:${plugin.constructor.VERSION}`)\n      }\n    }\n\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload')\n      addPluginVersion('AwsS3', 'uppy-aws-s3')\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart')\n    }\n\n    addPluginVersion('Dropbox', 'uppy-dropbox')\n    addPluginVersion('Box', 'uppy-box')\n    addPluginVersion('Facebook', 'uppy-facebook')\n    addPluginVersion('GoogleDrive', 'uppy-google-drive')\n    addPluginVersion('Instagram', 'uppy-instagram')\n    addPluginVersion('OneDrive', 'uppy-onedrive')\n    addPluginVersion('Zoom', 'uppy-zoom')\n    addPluginVersion('Url', 'uppy-url')\n\n    if (this.opts.clientName != null) {\n      list.push(this.opts.clientName)\n    }\n\n    return list.join(',')\n  }\n\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   */\n  #attachAssemblyMetadata(file: UppyFile<M, B>, status: AssemblyResponse) {\n    // Add the metadata parameters Transloadit needs.\n    const meta = {\n      ...file.meta,\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file',\n    }\n    // Add Assembly-specific Tus endpoint.\n    const tus = {\n      ...file.tus,\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true,\n    }\n\n    // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n    let { remote } = file\n\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      const newHost = status.companion_url.replace(/\\/$/, '')\n      const path = file.remote.url\n        .replace(file.remote.companionUrl, '')\n        .replace(/^\\//, '')\n\n      remote = {\n        ...file.remote,\n        companionUrl: newHost,\n        url: `${newHost}/${path}`,\n      }\n    }\n\n    // Store the Assembly ID this file is in on the file under the `transloadit` key.\n    const newFile = {\n      ...file,\n      transloadit: {\n        assembly: status.assembly_id,\n      },\n    }\n    // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n    if (!this.opts.importFromUploadURLs) {\n      Object.assign(newFile, { meta, tus, remote })\n    }\n    return newFile\n  }\n\n  #createAssembly(\n    fileIDs: string[],\n    uploadID: string,\n    assemblyOptions: OptionsWithRestructuredFields,\n  ) {\n    this.uppy.log('[Transloadit] Create Assembly')\n\n    return this.client\n      .createAssembly({\n        ...assemblyOptions,\n        expectedFiles: fileIDs.length,\n      })\n      .then(async (newAssembly) => {\n        const files = this.uppy\n          .getFiles()\n          .filter(({ id }) => fileIDs.includes(id))\n        if (files.length !== fileIDs.length) {\n          if (files.length === 0) {\n            // All files have been removed, cancelling.\n            await this.client.cancelAssembly(newAssembly)\n            return null\n          }\n          // At least one file has been removed.\n          await this.client.updateNumberOfFilesInAssembly(\n            newAssembly,\n            files.length,\n          )\n        }\n\n        const assembly = new Assembly(newAssembly, this.#rateLimitedQueue)\n        const { status } = assembly\n        const assemblyID = status.assembly_id\n\n        const { assemblies, uploadsAssemblies } = this.getPluginState()\n        this.setPluginState({\n          // Store the Assembly status.\n          assemblies: {\n            ...assemblies,\n            [assemblyID]: status,\n          },\n          // Store the list of Assemblies related to this upload.\n          uploadsAssemblies: {\n            ...uploadsAssemblies,\n            [uploadID]: [...uploadsAssemblies[uploadID], assemblyID],\n          },\n        })\n\n        const updatedFiles: Record<string, UppyFile<M, B>> = {}\n        files.forEach((file) => {\n          updatedFiles[file.id] = this.#attachAssemblyMetadata(file, status)\n        })\n\n        this.uppy.setState({\n          files: {\n            ...this.uppy.getState().files,\n            ...updatedFiles,\n          },\n        })\n\n        // TODO: this should not live inside a `file-removed` event but somewhere more deterministic.\n        // Such as inside the function where the assembly has succeeded or cancelled.\n        // For the use case of cancelling the assembly when needed, we should try to do that with just `cancel-all`.\n        const fileRemovedHandler = (\n          fileRemoved: UppyFile<M, B>,\n          reason?: string,\n        ) => {\n          // If the assembly has successfully completed, we do not need these checks.\n          // Otherwise we may cancel an assembly after it already succeeded\n          if (assembly.status?.ok === 'ASSEMBLY_COMPLETED') {\n            this.uppy.off('file-removed', fileRemovedHandler)\n            return\n          }\n          if (reason === 'cancel-all') {\n            assembly.close()\n            this.uppy.off('file-removed', fileRemovedHandler)\n          } else if (fileRemoved.id in updatedFiles) {\n            delete updatedFiles[fileRemoved.id]\n            const nbOfRemainingFiles = Object.keys(updatedFiles).length\n\n            this.client\n              .updateNumberOfFilesInAssembly(newAssembly, nbOfRemainingFiles)\n              .catch(() => {\n                /* ignore potential errors */\n              })\n          }\n        }\n        this.uppy.on('file-removed', fileRemovedHandler)\n\n        this.uppy.emit('transloadit:assembly-created', status, fileIDs)\n\n        this.uppy.log(`[Transloadit] Created Assembly ${assemblyID}`)\n        return assembly\n      })\n      .catch((err) => {\n        // TODO: use AssemblyError?\n        const wrapped = new ErrorWithCause(\n          `${this.i18n('creatingAssemblyFailed')}: ${err.message}`,\n          { cause: err },\n        )\n        if ('details' in err) {\n          // @ts-expect-error details is not in the Error type\n          wrapped.details = err.details\n        }\n        if ('assembly' in err) {\n          // @ts-expect-error assembly is not in the Error type\n          wrapped.assembly = err.assembly\n        }\n        throw wrapped\n      })\n  }\n\n  #createAssemblyWatcher(idOrArrayOfIds: string | string[], uploadID: string) {\n    // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    const ids =\n      Array.isArray(idOrArrayOfIds) ? idOrArrayOfIds : [idOrArrayOfIds]\n    const watcher = new AssemblyWatcher(this.uppy, ids)\n\n    watcher.on('assembly-complete', (id: string) => {\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n        this.completedFiles[file.id] = true\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    watcher.on('assembly-error', (id: string, error: Error) => {\n      // Clear postprocessing state for all our files.\n      const filesFromAssembly = this.getAssemblyFiles(id)\n      filesFromAssembly.forEach((file) => {\n        // TODO Maybe make a postprocess-error event here?\n\n        this.uppy.emit('upload-error', file, error)\n        this.uppy.emit('postprocess-complete', file)\n      })\n\n      // Reset `tus` key in the file state, so when the upload is retried,\n      // old tus upload is not re-used — Assebmly expects a new upload, can't currently\n      // re-use the old one. See: https://github.com/transloadit/uppy/issues/4412\n      // and `onReceiveUploadUrl` in @uppy/tus\n      const files = { ...this.uppy.getState().files }\n      filesFromAssembly.forEach((file) => delete files[file.id].tus)\n      this.uppy.setState({ files })\n\n      this.uppy.emit('error', error)\n    })\n\n    this.assemblyWatchers[uploadID] = watcher\n  }\n\n  #shouldWaitAfterUpload() {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */\n  #reserveFiles(assembly: Assembly, fileIDs: string[]) {\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        return this.client.reserveFile(assembly.status, file)\n      }),\n    )\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */\n  #onFileUploadURLAvailable = (rawFile: UppyFile<M, B> | undefined) => {\n    const file = this.uppy.getFile(rawFile!.id)\n    if (!file?.transloadit?.assembly) {\n      return\n    }\n\n    const { assemblies } = this.getPluginState()\n    const assembly = assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  #findFile(uploadedFile: AssemblyFile) {\n    const files = this.uppy.getFiles()\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      // Completed file upload.\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file\n      }\n      // In-progress file upload.\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (\n          file.name === uploadedFile.name &&\n          file.size === uploadedFile.size\n        ) {\n          return file\n        }\n      }\n    }\n    return undefined\n  }\n\n  #onFileUploadComplete(assemblyId: string, uploadedFile: AssemblyFile) {\n    const state = this.getPluginState()\n    const file = this.#findFile(uploadedFile)\n    if (!file) {\n      this.uppy.log(\n        '[Transloadit] Couldn’t find the file, it was likely removed in the process',\n      )\n      return\n    }\n    this.setPluginState({\n      files: {\n        ...state.files,\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile,\n        },\n      },\n    })\n    this.uppy.emit(\n      'transloadit:upload',\n      uploadedFile,\n      this.getAssembly(assemblyId),\n    )\n  }\n\n  #onResult(assemblyId: string, stepName: string, result: AssemblyResult) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null // eslint-disable-line no-param-reassign\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId,\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry],\n    })\n    this.uppy.emit(\n      'transloadit:result',\n      stepName,\n      result,\n      this.getAssembly(assemblyId),\n    )\n  }\n\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   */\n  #onAssemblyFinished(status: AssemblyResponse) {\n    const url = status.assembly_ssl_url\n    this.client.getAssemblyStatus(url).then((finalStatus) => {\n      const assemblyId = finalStatus.assembly_id\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...state.assemblies,\n          [assemblyId]: finalStatus,\n        },\n      })\n      this.uppy.emit('transloadit:complete', finalStatus)\n    })\n  }\n\n  async #cancelAssembly(assembly: AssemblyResponse) {\n    await this.client.cancelAssembly(assembly)\n    // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n    this.uppy.emit('transloadit:assembly-cancelled', assembly)\n  }\n\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */\n  #onCancelAll = async ({ reason }: { reason?: string } = {}) => {\n    try {\n      if (reason !== 'user') return\n\n      const { uploadsAssemblies } = this.getPluginState()\n      const assemblyIDs = Object.values(uploadsAssemblies).flat(1)\n      const assemblies = assemblyIDs.map((assemblyID) =>\n        this.getAssembly(assemblyID),\n      )\n\n      await Promise.all(\n        assemblies.map((assembly) => this.#cancelAssembly(assembly)),\n      )\n    } catch (err) {\n      this.uppy.log(err)\n    }\n  }\n\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   */\n  #getPersistentData = (\n    setData: (\n      arg: Record<\n        string,\n        Pick<TransloaditState, 'assemblies' | 'uploadsAssemblies'>\n      >,\n    ) => void,\n  ) => {\n    const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n    setData({\n      [this.id]: {\n        assemblies,\n        uploadsAssemblies,\n      },\n    })\n  }\n\n  #onRestored = (pluginData: Record<string, TransloaditState>) => {\n    const savedState =\n      pluginData && pluginData[this.id] ? pluginData[this.id] : {}\n    const previousAssemblies = (savedState as TransloaditState).assemblies || {}\n    const uploadsAssemblies =\n      (savedState as TransloaditState).uploadsAssemblies || {}\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return\n    }\n\n    // Convert loaded Assembly statuses to a Transloadit plugin state object.\n    const restoreState = (assemblies: TransloaditState['assemblies']) => {\n      const files: Record<\n        string,\n        { id: string; assembly: string; uploadedFile: AssemblyFile }\n      > = {}\n      const results: {\n        result: AssemblyResult\n        stepName: string\n        id: string\n        assembly: string\n      }[] = []\n      for (const [id, status] of Object.entries(assemblies)) {\n        status.uploads.forEach((uploadedFile) => {\n          const file = this.#findFile(uploadedFile)\n          files[uploadedFile.id] = {\n            id: file!.id,\n            assembly: id,\n            uploadedFile,\n          }\n        })\n\n        const state = this.getPluginState()\n        Object.keys(status.results).forEach((stepName) => {\n          for (const result of status.results[stepName]) {\n            const file = state.files[result.original_id]\n            result.localId = file ? file.id : null\n            results.push({\n              id: result.id,\n              result,\n              stepName,\n              assembly: id,\n            })\n          }\n        })\n      }\n\n      this.setPluginState({\n        assemblies,\n        files,\n        results,\n        uploadsAssemblies,\n      })\n    }\n\n    // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n    const restoreAssemblies = () => {\n      // eslint-disable-next-line no-shadow\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n      // Set up the assembly watchers again for all the ongoing uploads.\n      Object.keys(uploadsAssemblies).forEach((uploadID) => {\n        const assemblyIDs = uploadsAssemblies[uploadID]\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n      })\n\n      const allAssemblyIDs = Object.keys(assemblies)\n      allAssemblyIDs.forEach((id) => {\n        const assembly = new Assembly(assemblies[id], this.#rateLimitedQueue)\n        this.#connectAssembly(assembly)\n      })\n    }\n\n    // Force-update all Assemblies to check for missed events.\n    const updateAssemblies = () => {\n      const { assemblies } = this.getPluginState()\n      return Promise.all(\n        Object.keys(assemblies).map((id) => {\n          return this.activeAssemblies[id].update()\n        }),\n      )\n    }\n\n    // Restore all Assembly state.\n    this.restored = Promise.resolve().then(() => {\n      restoreState(previousAssemblies)\n      restoreAssemblies()\n      updateAssemblies()\n    })\n\n    this.restored.then(() => {\n      this.restored = null\n    })\n  }\n\n  #connectAssembly(assembly: Assembly) {\n    const { status } = assembly\n    const id = status.assembly_id\n    this.activeAssemblies[id] = assembly\n\n    // Sync local `assemblies` state\n    assembly.on('status', (newStatus: AssemblyResponse) => {\n      const { assemblies } = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...assemblies,\n          [id]: newStatus,\n        },\n      })\n    })\n\n    assembly.on('upload', (file: AssemblyFile) => {\n      this.#onFileUploadComplete(id, file)\n    })\n    assembly.on('error', (error: AssemblyError) => {\n      error.assembly = assembly.status // eslint-disable-line no-param-reassign\n      this.uppy.emit('transloadit:assembly-error', assembly.status, error)\n    })\n\n    assembly.on('executing', () => {\n      this.uppy.emit('transloadit:assembly-executing', assembly.status)\n    })\n\n    assembly.on(\n      'execution-progress',\n      (details: { progress_combined?: number }) => {\n        this.uppy.emit('transloadit:execution-progress', details)\n\n        if (details.progress_combined != null) {\n          // TODO: Transloadit emits progress information for the entire Assembly combined\n          // (progress_combined) and for each imported/uploaded file (progress_per_original_file).\n          // Uppy's current design requires progress to be set for each file, which is then\n          // averaged to get the total progress (see calculateProcessingProgress.js).\n          // Therefore, we currently set the combined progres for every file, so that this is\n          // the same value that is displayed to the end user, although we have more accurate\n          // per-file progress as well. We cannot use this here or otherwise progress from\n          // imported files would not be counted towards the total progress because imported\n          // files are not registered with Uppy.\n          for (const file of this.uppy.getFiles()) {\n            this.uppy.emit('postprocess-progress', file, {\n              mode: 'determinate',\n              value: details.progress_combined / 100,\n              message: this.i18n('encoding'),\n            })\n          }\n        }\n      },\n    )\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', (stepName: string, result: AssemblyResult) => {\n        this.#onResult(id, stepName, result)\n      })\n    }\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    }\n\n    // No need to connect to the socket if the Assembly has completed by now.\n    // @ts-expect-error ok does not exist on Assembly?\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly\n    }\n\n    assembly.connect()\n    return assembly\n  }\n\n  #prepareUpload = async (fileIDs: string[], uploadID: string) => {\n    const files = fileIDs.map((id) => this.uppy.getFile(id))\n    const filesWithoutErrors = files.filter((file) => {\n      if (!file.error) {\n        this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('creatingAssembly'),\n        })\n        return true\n      }\n      return false\n    })\n\n    const createAssembly = async ({\n      // eslint-disable-next-line no-shadow\n      fileIDs,\n      options,\n    }: {\n      fileIDs: string[]\n      options: OptionsWithRestructuredFields\n    }) => {\n      try {\n        const assembly = (await this.#createAssembly(\n          fileIDs,\n          uploadID,\n          options,\n        )) as Assembly\n        if (this.opts.importFromUploadURLs) {\n          await this.#reserveFiles(assembly, fileIDs)\n        }\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n        })\n        return assembly\n      } catch (err) {\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          // Clear preprocessing state when the Assembly could not be created,\n          // otherwise the UI gets confused about the lingering progress keys\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      }\n    }\n\n    const { uploadsAssemblies } = this.getPluginState()\n    this.setPluginState({\n      uploadsAssemblies: {\n        ...uploadsAssemblies,\n        [uploadID]: [],\n      },\n    })\n\n    const assemblyOptions = new AssemblyOptionsBuilder(\n      filesWithoutErrors,\n      this.opts,\n    )\n\n    await assemblyOptions\n      .build()\n      .then((assemblies) => Promise.all(assemblies.map(createAssembly)))\n      .then((maybeCreatedAssemblies) => {\n        const createdAssemblies = maybeCreatedAssemblies.filter(Boolean)\n        const assemblyIDs = createdAssemblies.map(\n          (assembly) => assembly.status.assembly_id,\n        )\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n        return Promise.all(\n          createdAssemblies.map((assembly) => this.#connectAssembly(assembly)),\n        )\n      })\n      // If something went wrong before any Assemblies could be created,\n      // clear all processing state.\n      .catch((err) => {\n        filesWithoutErrors.forEach((file) => {\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      })\n  }\n\n  #afterUpload = (fileIDs: string[], uploadID: string): Promise<void> => {\n    const files = fileIDs.map((fileID) => this.uppy.getFile(fileID))\n    // Only use files without errors\n    const filteredFileIDs = files\n      .filter((file) => !file.error)\n      .map((file) => file.id)\n\n    const state = this.getPluginState()\n\n    // If we're still restoring state, wait for that to be done.\n    if (this.restored) {\n      return this.restored.then(() => {\n        return this.#afterUpload(filteredFileIDs, uploadID)\n      })\n    }\n\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    const closeSocketConnections = () => {\n      assemblyIDs.forEach((assemblyID) => {\n        const assembly = this.activeAssemblies[assemblyID]\n        assembly.close()\n        delete this.activeAssemblies[assemblyID]\n      })\n    }\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.#shouldWaitAfterUpload()) {\n      closeSocketConnections()\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n      this.uppy.addResultData(uploadID, { transloadit: assemblies })\n      return Promise.resolve()\n    }\n\n    // If no Assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, { transloadit: [] })\n      return Promise.resolve()\n    }\n\n    const incompleteFiles = files.filter(\n      (file) => !hasProperty(this.completedFiles, file.id),\n    )\n    incompleteFiles.forEach((file) => {\n      this.uppy.emit('postprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('encoding'),\n      })\n    })\n\n    const watcher = this.assemblyWatchers[uploadID]\n    return watcher.promise.then(() => {\n      closeSocketConnections()\n\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n\n      // Remove the Assembly ID list for this upload,\n      // it's no longer going to be used anywhere.\n      const uploadsAssemblies = { ...this.getPluginState().uploadsAssemblies }\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n\n      this.uppy.addResultData(uploadID, {\n        transloadit: assemblies,\n      })\n    })\n  }\n\n  #closeAssemblyIfExists = (assemblyID?: string) => {\n    if (!assemblyID) return\n    this.activeAssemblies[assemblyID]?.close()\n  }\n\n  #onError = (err: { name: string; message: string; details?: string }) => {\n    // TODO: uploadID is not accessible here. The state in core has many upload IDs,\n    // so we don't know which one to get. This code never worked and no one complained.\n    // See if we run into problems with this.\n    // const state = this.getPluginState()\n    // const assemblyIDs = state.uploadsAssemblies[uploadID]\n    // assemblyIDs?.forEach(this.#closeAssemblyIfExists)\n\n    this.client\n      .submitError(err)\n      // if we can't report the error that sucks\n      .catch(sendErrorToConsole(err))\n  }\n\n  #onTusError = (file: UppyFile<M, B> | undefined, err: Error) => {\n    this.#closeAssemblyIfExists(file?.transloadit?.assembly)\n    if (err?.message?.startsWith('tus: ')) {\n      const endpoint = (\n        err as TusDetailedError\n      ).originalRequest?.getUnderlyingObject()?.responseURL as string\n      this.client\n        .submitError(err, { endpoint })\n        // if we can't report the error that sucks\n        .catch(sendErrorToConsole(err))\n    }\n  }\n\n  install(): void {\n    this.uppy.addPreProcessor(this.#prepareUpload)\n    this.uppy.addPostProcessor(this.#afterUpload)\n\n    // We may need to close socket.io connections on error.\n    this.uppy.on('error', this.#onError)\n\n    // Handle cancellation.\n    this.uppy.on('cancel-all', this.#onCancelAll)\n\n    this.uppy.on('upload-error', this.#onTusError)\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this.#onFileUploadURLAvailable)\n    } else {\n      // @ts-expect-error endpoint has to be required for @uppy/tus but for some reason\n      // we don't need it here.\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        // Only send Assembly metadata to the tus endpoint.\n        allowedMetaFields: ['assembly_url', 'filename', 'fieldname'],\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit,\n        rateLimitedQueue: this.#rateLimitedQueue,\n        retryDelays: this.opts.retryDelays,\n      })\n    }\n\n    this.uppy.on('restore:get-data', this.#getPersistentData)\n    this.uppy.on('restored', this.#onRestored)\n\n    this.setPluginState({\n      // Contains Assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: [],\n    })\n\n    // We cannot cancel individual files because Assemblies tend to contain many files.\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: false,\n      },\n    })\n  }\n\n  uninstall(): void {\n    this.uppy.removePreProcessor(this.#prepareUpload)\n    this.uppy.removePostProcessor(this.#afterUpload)\n    this.uppy.off('error', this.#onError)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.#onFileUploadURLAvailable)\n    }\n\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: true,\n      },\n    })\n  }\n\n  getAssembly(id: string): AssemblyResponse {\n    const { assemblies } = this.getPluginState()\n    return assemblies[id]\n  }\n\n  getAssemblyFiles(assemblyID: string): UppyFile<M, B>[] {\n    return this.uppy.getFiles().filter((file) => {\n      return file?.transloadit?.assembly === assemblyID\n    })\n  }\n}\n\nexport { COMPANION_URL, COMPANION_ALLOWED_HOSTS }\n"],"mappings":"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"}
{"version":3,"names":["prettierBytes","match","defaultOptions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","RestrictionError","Error","constructor","message","opts","_opts$isUserFacing","isRestriction","isUserFacing","file","Restricter","getOpts","getI18n","_opts$restrictions","restrictions","Array","isArray","TypeError","validateAggregateRestrictions","existingFiles","addingFiles","nonGhostFiles","filter","f","isGhost","length","smart_count","totalFilesSize","reduce","total","_f$size","size","addingFile","name","validateSingleFile","isCorrectFileType","some","type","includes","replace","extension","toLowerCase","slice","allowedFileTypesString","join","types","validate","forEach","validateMinNumberOfFiles","files","Object","keys","getMissingRequiredMetaFields","error","fileName","missingFields","field","hasOwn","meta","push"],"sources":["Restricter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable max-classes-per-file, class-methods-use-this */\nimport prettierBytes from '@transloadit/prettier-bytes'\n// @ts-ignore untyped\nimport match from 'mime-match'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { I18n } from '@uppy/utils/lib/Translator'\nimport type { State, NonNullableUppyOptions } from './Uppy.js'\n\nexport type Restrictions = {\n  maxFileSize: number | null\n  minFileSize: number | null\n  maxTotalFileSize: number | null\n  maxNumberOfFiles: number | null\n  minNumberOfFiles: number | null\n  allowedFileTypes: string[] | null\n  requiredMetaFields: string[]\n}\n\n/**\n * The minimal required properties to be present from UppyFile in order to validate it.\n */\nexport type ValidateableFile<M extends Meta, B extends Body> = Pick<\n  UppyFile<M, B>,\n  'type' | 'extension' | 'size' | 'name'\n  // Both UppyFile and CompanionFile need to be passable as a ValidateableFile\n  // CompanionFile's do not have `isGhost`, so we mark it optional.\n> & { isGhost?: boolean }\n\nconst defaultOptions = {\n  maxFileSize: null,\n  minFileSize: null,\n  maxTotalFileSize: null,\n  maxNumberOfFiles: null,\n  minNumberOfFiles: null,\n  allowedFileTypes: null,\n  requiredMetaFields: [],\n}\n\nclass RestrictionError<M extends Meta, B extends Body> extends Error {\n  isUserFacing: boolean\n\n  file!: UppyFile<M, B>\n\n  constructor(\n    message: string,\n    opts?: { isUserFacing?: boolean; file?: UppyFile<M, B> },\n  ) {\n    super(message)\n    this.isUserFacing = opts?.isUserFacing ?? true\n    if (opts?.file) {\n      this.file = opts.file // only some restriction errors are related to a particular file\n    }\n  }\n\n  isRestriction = true\n}\n\nclass Restricter<M extends Meta, B extends Body> {\n  getI18n: () => I18n\n\n  getOpts: () => NonNullableUppyOptions<M, B>\n\n  constructor(\n    getOpts: () => NonNullableUppyOptions<M, B>,\n    getI18n: () => I18n,\n  ) {\n    this.getI18n = getI18n\n    this.getOpts = (): NonNullableUppyOptions<M, B> => {\n      const opts = getOpts()\n\n      if (\n        opts.restrictions?.allowedFileTypes != null &&\n        !Array.isArray(opts.restrictions.allowedFileTypes)\n      ) {\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array')\n      }\n      return opts\n    }\n  }\n\n  // Because these operations are slow, we cannot run them for every file (if we are adding multiple files)\n  validateAggregateRestrictions(\n    existingFiles: ValidateableFile<M, B>[],\n    addingFiles: ValidateableFile<M, B>[],\n  ): void {\n    const { maxTotalFileSize, maxNumberOfFiles } = this.getOpts().restrictions\n\n    if (maxNumberOfFiles) {\n      const nonGhostFiles = existingFiles.filter((f) => !f.isGhost)\n      if (nonGhostFiles.length + addingFiles.length > maxNumberOfFiles) {\n        throw new RestrictionError(\n          `${this.getI18n()('youCanOnlyUploadX', {\n            smart_count: maxNumberOfFiles,\n          })}`,\n        )\n      }\n    }\n\n    if (maxTotalFileSize) {\n      let totalFilesSize = existingFiles.reduce(\n        (total, f) => (total + (f.size ?? 0)) as number,\n        0,\n      )\n\n      for (const addingFile of addingFiles) {\n        if (addingFile.size != null) {\n          // We can't check maxTotalFileSize if the size is unknown.\n          totalFilesSize += addingFile.size\n\n          if (totalFilesSize > maxTotalFileSize) {\n            throw new RestrictionError(\n              this.getI18n()('exceedsSize', {\n                size: prettierBytes(maxTotalFileSize),\n                file: addingFile.name,\n              }),\n            )\n          }\n        }\n      }\n    }\n  }\n\n  validateSingleFile(file: ValidateableFile<M, B>): void {\n    const { maxFileSize, minFileSize, allowedFileTypes } =\n      this.getOpts().restrictions\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.some((type) => {\n        // check if this is a mime-type\n        if (type.includes('/')) {\n          if (!file.type) return false\n          return match(file.type.replace(/;.*?$/, ''), type)\n        }\n\n        // otherwise this is likely an extension\n        if (type[0] === '.' && file.extension) {\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase()\n        }\n        return false\n      })\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        throw new RestrictionError(\n          this.getI18n()('youCanOnlyUploadFileTypes', {\n            types: allowedFileTypesString,\n          }),\n          { file } as { file: UppyFile<M, B> },\n        )\n      }\n    }\n\n    // We can't check maxFileSize if the size is unknown.\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\n      throw new RestrictionError(\n        this.getI18n()('exceedsSize', {\n          size: prettierBytes(maxFileSize),\n          file: file.name,\n        }),\n        { file } as { file: UppyFile<M, B> },\n      )\n    }\n\n    // We can't check minFileSize if the size is unknown.\n    if (minFileSize && file.size != null && file.size < minFileSize) {\n      throw new RestrictionError(\n        this.getI18n()('inferiorSize', {\n          size: prettierBytes(minFileSize),\n        }),\n        { file } as { file: UppyFile<M, B> },\n      )\n    }\n  }\n\n  validate(\n    existingFiles: ValidateableFile<M, B>[],\n    addingFiles: ValidateableFile<M, B>[],\n  ): void {\n    addingFiles.forEach((addingFile) => {\n      this.validateSingleFile(addingFile)\n    })\n    this.validateAggregateRestrictions(existingFiles, addingFiles)\n  }\n\n  validateMinNumberOfFiles(files: State<M, B>['files']): void {\n    const { minNumberOfFiles } = this.getOpts().restrictions\n    if (minNumberOfFiles && Object.keys(files).length < minNumberOfFiles) {\n      throw new RestrictionError(\n        this.getI18n()('youHaveToAtLeastSelectX', {\n          smart_count: minNumberOfFiles,\n        }),\n      )\n    }\n  }\n\n  getMissingRequiredMetaFields(file: ValidateableFile<M, B> & { meta: M }): {\n    missingFields: string[]\n    error: RestrictionError<M, B>\n  } {\n    const error = new RestrictionError<M, B>(\n      this.getI18n()('missingRequiredMetaFieldOnFile', { fileName: file.name }),\n    )\n    const { requiredMetaFields } = this.getOpts().restrictions\n    const missingFields: string[] = []\n\n    for (const field of requiredMetaFields) {\n      if (!Object.hasOwn(file.meta, field) || file.meta[field] === '') {\n        missingFields.push(field)\n      }\n    }\n\n    return { missingFields, error }\n  }\n}\n\nexport { Restricter, defaultOptions, RestrictionError }\n"],"mappings":"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"}